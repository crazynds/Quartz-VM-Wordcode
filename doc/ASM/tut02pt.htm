<html>

<head>
<title>Tutorial 2 - Adam Hyde</title>
</head>

<body bgcolor="#00FFFF">

<p>&nbsp;</p>
<div align="center"><center>

<table border="5" width="50%">
  <tr>
    <td width="50%" align="center" bgcolor="#FF0000"><strong><big>Tutorial de Assembler de
    Adam Hyde 1.0</big></strong><p><small>PARTE 2</small><br>
    <small>Traduzido por Renato Nunes Bastos</small></td>
  </tr>
</table>
</center></div>

<p>Versão&nbsp;&nbsp; :&nbsp; 1.2<br>
Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; 17-02-1996 / online by Renato 01-11-1998<br>
Contato&nbsp; :&nbsp; blackcat@vale.faroc.com.au<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; http://www.faroc.com.au/~blackcat<br>
;Renato&nbsp; :&nbsp;
<a href="mailto:rnbastos@ig.com.br">rnbastos@ig.com.br</a>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://www.geocities.com/SiliconValley/Park/3174">http://www.geocities.com/SiliconValley/Park/3174</a></p>

<hr>

<p align="center"><a href="#seg">Segmentos e Offsets</a> | <a href="#arq">Uma Arquitetura
Segmentada</a> | <a href="#pilha">A Pilha</a> |</p>

<hr>

<p>Olá de novo, futuros proramadores de Assembler. Para aqueles que perderam a <a
href="tut01pt.htm">primeira parte</a>, pegue-a agora na minha homepage.</p>

<p>De qualquer modo, no último número eu disse que estaria discutindo sobre hexadecimal,
segmentos + offsets, mais algumas intruções e algumas procedures contendo assembler que
você poderia realmente usar.</p>

<p>Então, lá vamos nós, com segmentos e offsets!</p>

<hr>

<p><big><strong><u><a name="seg">LIÇÃO 3 - Segmentos e Offsets</a><br>
</u></strong></big></p>

<p>Antes de explorarmos o grande e mau mundo dos segmentos e offsets, há umas
terminologias que você precisar&nbsp; conhecer. 

<ul>
  <li>O BIT - a menor parte de dados que podemos usar. Um bit - um oitavo de um byte pode ser
    ou um 1 ou um 0.&nbsp; Usando esses dois dígitos podemos fazer números em BINÁRIO ou
    BASE 2.</li>
</ul>

<p>&nbsp;&nbsp;&nbsp;&nbsp; EX.:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000 = 0
&nbsp;&nbsp; 0100 = 4&nbsp;&nbsp; 1000 = 8&nbsp;&nbsp;&nbsp; 1100 = 12&nbsp;&nbsp; 10000 =
16<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0001 = 1&nbsp;&nbsp; 0101 = 5&nbsp;&nbsp; 1001 = 9&nbsp;&nbsp;&nbsp; 1101 = 13
&nbsp;&nbsp; ...Acho que você<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0010 = 2&nbsp;&nbsp; 0110 = 6&nbsp;&nbsp; 1010 = 10&nbsp;&nbsp; 1110 = 14&nbsp;&nbsp; já
sacou...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0011 = 3&nbsp;&nbsp; 0111 = 7&nbsp;&nbsp; 1011 = 11&nbsp;&nbsp; 1111 = 15 

<ul>
  <li>O NIBBLE, ou quatro bits. Um nibble pode ter um valor máximo de 1111 que é 15 em
    decimal. É aqui que o hexadecimal entra. Hex é baseado naqueles 16 números, (0-15), e
    quando escrevemos em hex, usamos os 'dígitos' abaixo:</li>
</ul>

<p align="center">0 1 2 3 4 5 6 7 8 9 A B C D E F</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Hexadecimal é na verdade muito fácil de se usar, e, apenas
como curiosidade, eu acho que os Babilônios - uma civilização antiga qualquer - usava
um sistema de numeração em BASE 16. Tem algum historiador aí fora que queira confirmar
isso?</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; IMPORTANTE &gt;&gt;&gt; Um nibble pode aguentar um valor até
Fh &lt;&lt;&lt; IMPORTANTE 

<ul>
  <li>O BYTE - o que mais usaremos. O byte tem 8 bits de tamanho - isso é 2 nibbles, e é o
    único valor que você vai conseguir colocar num registrador de 8 bits. EX.: AH, AL, BH,
    BL, ...</li>
</ul>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Um byte tem um valor máximo de 255 em decimal, 11111111 em
binário, ou FFh em hexadecimal. 

<ul>
  <li>A WORD - outra unidade comumente usada. Uma word é um número de 16 bits, e é capaz de
    armazenar um número até 65535. Isso é 1111111111111111 em binário, e FFFFh em hex.</li>
</ul>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Obs.:&nbsp; Por causa de uma word ser quatro nibbles, é
também representada por quatro dígitos hexadecimais.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Obs.:&nbsp; Isto é um número de 16 bits, e corresponde aos
registradores de 16 bits. Ou seja, AX, BX, CX, DX, DI, SI, BP,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SP, DS, ES, SS e IP. 

<ul>
  <li>A DWORD, ou double word consiste de 2 words ou 4 bytes ou 8 nibbles ou 32 bits. Você
    não vai usar muito as double words nestes tutoriais, mas vamos mencioná-las mais tarde
    quando falarmos de PROGRAMAÇÃO EM 32 BITS.</li>
</ul>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Uma DWORD pode armazenar de 0 a 4,294,967,295, que é
FFFFFFFFh, ou 11111111111111111111111111111111.&nbsp; Espero que haja 32 um's lá atrás.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; A DWORD também é o tamanho dos registradores extendiddos de
32 BITS, ou seja, EAX, EBX, ECX, EDX, EDI, ESI, EBP, ESP e EIP. 

<ul>
  <li>O KILOBYTE, é 1024 bytes, NÃO 1000 bytes.&nbsp; O kilobyte é igual a 256
    double-words, 512 words, 1024 bytes, 2048 nibbles ou 8192 BITS. Eu não vou escrever todos
    os um's.</li>
  <li>O MEGABYTE, ou 1024 kilobytes. Isso é 1,048,576 bytes ou 8,388,608 bits.</li>
</ul>

<p>Agora que já cobrimos a terminologia, vamos dar uma&nbsp; olhada mais de perto como
aqueles registradores são estruturados. Nós dissemos que AL e AH eram registradores de 8
bits, logo, eles não deveriam se parecer com algo assim?</p>
<div align="center"><center>

<table border="1" width="80%">
  <tr>
    <td width="48%" colspan="8" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">AH</font></big></td>
    <td width="52%" colspan="8" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">AL</font></big></td>
  </tr>
  <tr>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center" bgcolor="#0000FF"><big><font color="#FFFFFF">0</font></big></td>
  </tr>
</table>
</center></div>

<p>&nbsp;&nbsp;&nbsp; <br>
Neste caso, ambos AH e AL = 0, OU 00h e 00h.&nbsp; Como resultado, para calcular AX
usamos:&nbsp; AX = 00h + 00h. Quando digo + eu quero dizer, 'ponha junto' não AX = AH
MAIS AL.</p>

<p>Assim, se AH era igual a 00000011 e AL era igual a 0000100, para calcular AX nós
devemos fazer o seguinte.</p>

<p>1) Pegue os valores hexadecimais de AH e AL.</p>

<p>&nbsp;&nbsp; 00000011 = 03h&nbsp;&nbsp; 00010000 = 10h</p>

<p>2) Combine-os.</p>

<p>&nbsp;&nbsp; AX = AH&nbsp; + AL<br>
&nbsp;&nbsp; AX = 03h + 10h<br>
&nbsp;&nbsp; AX = 0310h</p>

<p>E aí você consegue o resultado. Não é tão macetoso assim.</p>

<p>Okay, agora vamos ver os registradores de 16 bits:<br>
</p>
<div align="center"><center>

<table border="1" width="80%" bgcolor="#0000FF">
  <tr>
    <td width="100%" colspan="16" align="center"><big><font color="#FFFFFF">AX</font></big></td>
  </tr>
  <tr>
    <td width="48%" colspan="8" align="center"><big><font color="#FFFFFF">AH</font></big></td>
    <td width="52%" colspan="8" align="center"><big><font color="#FFFFFF">AL</font></big></td>
  </tr>
  <tr>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="6%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="7%" align="center"><big><font color="#FFFFFF">0</font></big></td>
  </tr>
</table>
</center></div>

<p>De onde podemos ver que AX = 00000000 e 00000000, ou 0000000000000000.<br>
</p>

<p>Agora por último, vejamos como um registrador de 32 bits se parece:</p>
<div align="center"><center>

<table border="1" width="83%" bgcolor="#0000FF">
  <tr>
    <td width="100%" align="center" colspan="32"><big><font color="#FFFFFF">EAX</font></big></td>
  </tr>
  <tr>
    <td width="50%" align="center" colspan="16">&nbsp;</td>
    <td width="50%" align="center" colspan="16"><big><font color="#FFFFFF">AX</font></big></td>
  </tr>
  <tr>
    <td width="50%" align="center" colspan="16">&nbsp;</td>
    <td width="25%" align="center" colspan="8"><big><font color="#FFFFFF">AH</font></big></td>
    <td width="25%" align="center" colspan="8"><big><font color="#FFFFFF">AL</font></big></td>
  </tr>
  <tr>
    <td width="4%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="4%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="4%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="4%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
    <td width="3%" align="center"><big><font color="#FFFFFF">0</font></big></td>
  </tr>
</table>
</center></div>

<p align="left">(by Renato - essa tabela estava errada na versão original, colocando o AX
na parte mais significtiva de EAX. Eu tomei o direito de consertar. Se estiver errado -
era mesmo na parte mais significativa? - me avisem)</p>

<p>&nbsp;</p>

<p>Não é muito difícil, espero. E se entendeu isso, você está pronto para SEGMENTOS e
OFFSETS.</p>

<hr>

<p><big><strong><a name="arq"><u>Uma Arquitetura Segmentada</u></a><br>
</strong></big></p>

<p>Há muito, muito tempo atrás, quando a IBM construiu o primeiro PC, não era costume
programas terem mais de 1 megabyte - eca, os primeiros XT's tinham apenas 64K de RAM! De
qualquer modo, vendo que os projetistas do XT não consideravam aplicações enormes,
decidiram dividir a memória em SEGMENTOS, pequenas áreas de mem¢ria RAM que você pode
colocar APENAS uma tela virtual para gráficos em modo 320x200x256.</p>

<p>É claro, você pode acessar mais de um megabyte de RAM, mas você tem que dividi-la em
segmentos para usá-la, e esse é o problema. É obvio, com programação em 32 bits dé
pra acessas até 4GB de RAM sem usar segmentos, mas isso é uma outra história.</p>

<p>Segmentos e offsets são apenas um método de especificar uma posição na memória.<br>
</p>

<p>EG:&nbsp;&nbsp; 3CE5:502A</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^^^^&nbsp; ^^^^<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEG&nbsp;&nbsp; OFS</p>

<p>Okay, aqui está a especificação:<br>
</p>

<p>Um OFFSET&nbsp; = SEGMENT X 16<br>
Um SEGMENT = OFFSET&nbsp; / 16</p>

<p>Alguns registradores de segmento são:</p>

<p>CS, DS, ES, SS e FS, GF&nbsp; - Obs.: Os últimos 2 são registradores que só existem
em 386 ou superiores.</p>

<p>Alguns registradores de offset são:</p>

<p>BX, DI, SI, BP, SP, IP&nbsp;&nbsp;&nbsp;&nbsp; - Obs.: Quando em modo protegido, você
pode usar qualquer registrador de uso geral como<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
um registrador de offset - EXCETO IP.<br>
</p>

<p>Alguns segmentos e offsets comuns são:</p>

<p>&nbsp;&nbsp;&nbsp; CS:IP - Endereço do código executando no momento.<br>
&nbsp;&nbsp;&nbsp; SS:SP - Endereço da posição atual da pilha.</p>

<p>&nbsp;&nbsp;&nbsp; OBS.: NÃO SE INTROMETA COM ELES !</p>

<p>Assim quando nos referirmos a segmentos e offsets, faremos dessa forma:</p>

<p>SEGMENTO:OFFSET</p>

<p>Um bom exemplo seria:</p>

<p>A000:0000 - que na verdade corresponde ao topo esquerdo da tela VGA em modo colorido
320x200x256.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ** FATO ENGRAÇADO
** A RAM da VGA começa em A000h&nbsp; :)</p>

<hr>

<p>Ufa! Isso foi muito para o segundo tutorial. Contudo, ainda não terminamos.<br>
Esse negócio de AX, AH, AL é um conceito que você pode não ter sacado ainda, então
lá vamos nós:</p>

<p>&nbsp;&nbsp;&nbsp; MOV&nbsp;&nbsp; AX, 0&nbsp;&nbsp;&nbsp;&nbsp; ; AX = 0<br>
&nbsp;&nbsp;&nbsp; MOV&nbsp;&nbsp; AL, 0&nbsp;&nbsp;&nbsp;&nbsp; ; AL = 0<br>
&nbsp;&nbsp;&nbsp; MOV&nbsp;&nbsp; AH, 0&nbsp;&nbsp;&nbsp;&nbsp; ; AH = 0</p>

<p>&nbsp;&nbsp;&nbsp; MOV&nbsp;&nbsp; AL, FFh&nbsp;&nbsp; ; AL = FFh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AX = 00FFh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AH = 00h</p>

<p>&nbsp;&nbsp;&nbsp; INC&nbsp;&nbsp; AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; AX =
AX + 1</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AX = 0100h<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AH = 01h<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AL = 00h</p>

<p>&nbsp;&nbsp;&nbsp; MOV&nbsp;&nbsp; AH, ABh&nbsp;&nbsp; ; AX = AB00h<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AH = ABh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; AL = 00h<br>
</p>

<p>Pegou?</p>

<hr>

<p>COISAS A FAZER:</p>

<p>1) Aprender aquele negócio de BIT/NIBBLE/BYTE... de cor.<br>
2) Voltar nos exemplos de segmento e offset.<br>
3) Tenha certeza que você entendeu a relação entre AX, AH e AL.<br>
4) Que tal um problemas de adição hexadecimal?</p>

<hr>

<p><a name="pilha"><big><strong><u>A Pilha</u></strong></big></a><br>
</p>

<p>A pilha é uma característica muito útil de que podemos tirar vantagem. Pense nela
como uma pilha de papéis numa bandeja de ENTRADA. Se você põe algo no topo, ela será a
primeira a ser tirada.</p>

<p>À medida que você adiciona algo à pilha, o apontador de pilha é DECREMENTADO, e
quando tira, é INCREMENTADO. Para explicar isso melhor, veja o diagrama abaixo:</p>
<div align="left">

<table border="1" width="15%" align="left">
  <tr>
    <td width="100%" align="center" bgcolor="#FF0000">A PILHA</td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00">&nbsp;</td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00"><ul>
      <li>&nbsp;</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00"><ul>
      <li>&nbsp;</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00"><ul>
      <li>&nbsp;</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00"><ul>
      <li>&nbsp;</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00">&nbsp;</td>
  </tr>
  <tr>
    <td width="100%" align="left" bgcolor="#FFFF00">&nbsp;&nbsp;&nbsp; SP</td>
  </tr>
</table>
</div>

<p>&nbsp;&nbsp;&nbsp; </p>

<p>&nbsp;<br>
&lt;&lt;&lt;&lt;&lt;&nbsp; Quando colocamos um byte na pilha, ele vai aqui - último a
entrar, primeiro a sair.<br>
<br>
<br>
<br>
<br>
<br>
&nbsp;&nbsp; &lt;&lt;&lt;&lt;&lt;&lt;&nbsp; O ponteiro de pilha se move para baixo.</p>

<p>&nbsp;</p>

<p>E na prática:<br>
</p>

<p>&nbsp;&nbsp; MOV&nbsp;&nbsp; AX, 03h&nbsp;&nbsp; ; AX = 03h<br>
&nbsp;&nbsp; PUSH&nbsp; AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; PUSH AX na pilha
(coloca no topo)</p>

<p>&nbsp;&nbsp; MOV&nbsp;&nbsp; AX, 04Eh&nbsp; ; AX = 04Eh</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; Faça alguma coisa... uma soma?</p>

<p>&nbsp;&nbsp; POP&nbsp;&nbsp; AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; AX = 03h</p>

<p>Ou:</p>

<p>&nbsp;&nbsp; MOV&nbsp;&nbsp; AX, 03h&nbsp;&nbsp; ; AX = 03h<br>
&nbsp;&nbsp; PUSH&nbsp; AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Adiciona AX à
pilha</p>

<p>&nbsp;&nbsp; MOV&nbsp;&nbsp; AX, 04Eh&nbsp; ; AX = 04Eh</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; Faça alguma coisa... uma soma?</p>

<p>&nbsp;&nbsp; POP&nbsp;&nbsp; BX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; BX = 03h<br>
</p>

<p>Você acabou de aprender duas instruções: 

<ul>
  <li>PUSH &lt;registrador&gt;&nbsp;&nbsp; - PUSH (coloca algo na pilha), e</li>
  <li>POP &lt;registrador&gt;&nbsp;&nbsp;&nbsp; - POP (retira ele de volta).<br>
  </li>
</ul>

<p>É tudo o que você precisa de aprender sobre pilha - por enquanto.</p>

<hr>

<p>Por último, algumas procedures que demonstram algo disso tudo. Note que os
comentários foram DELIBERADAMENTE REMOVIDOS. É seu dever tentar comentá-los. Note
também, que algumas novas instruções são introduzidas.<br>
</p>

<p>Procedure ClearScreen(A : Byte; Ch : Char);&nbsp;&nbsp; Assembler;</p>

<p>Asm&nbsp;&nbsp;&nbsp;&nbsp; { ClearScreen }<br>
&nbsp; mov&nbsp;&nbsp; ax, 0B800h<br>
&nbsp; mov&nbsp;&nbsp; es, ax<br>
&nbsp; xor&nbsp;&nbsp; di, di<br>
&nbsp; mov&nbsp;&nbsp; cx, 2000<br>
&nbsp; mov&nbsp;&nbsp; ah, A<br>
&nbsp; mov&nbsp;&nbsp; al, &amp;Ch<br>
&nbsp; rep&nbsp;&nbsp; stosw<br>
End;&nbsp;&nbsp;&nbsp; { ClearScreen }<br>
</p>

<p>Procedure CursorXY(X, Y : Word);&nbsp;&nbsp; Assembler;</p>

<p>Asm&nbsp;&nbsp;&nbsp; { CursorXY }<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; ax, Y<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; dh, al<br>
&nbsp;&nbsp; dec&nbsp;&nbsp; dh<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; ax, X<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; dl, al<br>
&nbsp;&nbsp; dec&nbsp;&nbsp; dl<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; ah, 2<br>
&nbsp;&nbsp; xor&nbsp;&nbsp; bh, bh<br>
&nbsp;&nbsp; int&nbsp;&nbsp; 10h<br>
End;&nbsp;&nbsp;&nbsp; { CursorXY }<br>
</p>

<p>Procedure PutPixel(X, Y : Integer; C : Byte; Adr : Word);&nbsp;&nbsp; Assembler;</p>

<p>Asm&nbsp;&nbsp;&nbsp;&nbsp; { PutPixel }<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; ax, [Adr]<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; es, ax<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; bx, [X]<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; dx, [Y]<br>
&nbsp;&nbsp; xchg&nbsp; dh, dl<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; al, [C]<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; di, dx<br>
&nbsp;&nbsp; shr&nbsp;&nbsp; di, 2<br>
&nbsp;&nbsp; add&nbsp;&nbsp; di, dx<br>
&nbsp;&nbsp; add&nbsp;&nbsp; di, bx<br>
&nbsp;&nbsp; stosb<br>
End;&nbsp;&nbsp;&nbsp; { PutPixel }<br>
</p>

<p>Procedure Delay(ms : Word);&nbsp;&nbsp; Assembler;</p>

<p>Asm&nbsp;&nbsp;&nbsp;&nbsp; { Delay }<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; ax, 1000<br>
&nbsp;&nbsp; mul&nbsp;&nbsp; ms<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; cx, dx<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; dx, ax<br>
&nbsp;&nbsp; mov&nbsp;&nbsp; ah, 86h<br>
&nbsp;&nbsp; int&nbsp;&nbsp; 15h<br>
End;&nbsp;&nbsp;&nbsp; { Delay }<br>
</p>

<p>COISAS A FAZER:</p>

<p>1) Vá ao exemplo de pilha. Faça seu próprio código exemplo.<br>
2) Comente as procedures acima do melhor modo que puder. Tente adivinhar o que&nbsp; as
novas intruções fazem. Não é tão difícil.</p>

<hr>

<p align="center"><u>NA PRÓXIMA SEMANA</u><br>
</p>

<ul>
  <li>Muito mais instruções, todos os JUMPS.</li>
  <li>O que são flags?</li>
  <li>As procedures acima com comentários.</li>
  <li>Um programa só em assembler. Você vai precisar pelo menos do DEBUG, embora TASM e
    TLINK sejam uma boa idéia.<br>
    <br>
  </li>
</ul>

<p>Se você deseja ver um tópico discutido num tutorial no futuro, escreva-me, e eu vou
ver o que eu posso fazer.</p>

<hr>

<p>Não perca!!! Baixe o <a href="tut03pt.htm">tutorial da próxima semana</a> na minha
homepage: 

<ul>
  <li>http://www.faroc.com.au/~blackcat</li>
  <li><a href="http://www.geocities.com/SiliconValley/Park/3174">http://www.geocities.com/SiliconValley/Park/3174</a></li>
</ul>

<p>- Adam Hyde.<br>
- Renato Nunes Bastos.</p>
</body>
</html>
